import{ar as d,q as l,aq as u,as as b,at as h,au as m,av as g,aw as p,ax as _,ay as y,az as P,aA as S,aB as j,aC as I,aD as C,aE as A,aF as f,aG as F,aH as T,aI as D,aJ as k,aK as E,aL as w,aM as R,aN as v,aO as B,aP as Q,aQ as x,aR as M,aS as V,aT as q,aU as L,aV as N,aW as O,aX as U,aY as W,aZ as G,a_ as z,a$ as H,b0 as J,b1 as K,b2 as $,b3 as Z,b4 as X,b5 as Y,b6 as ee,b7 as te,b8 as se,b9 as ae,ba as re,bb as oe,bc as ce,bd as ne,be as ie,bf as de,bg as le,bh as ue,bi as be,bj as he,bk as me,bl as ge,bm as pe,bn as _e,bo as ye,bp as Pe,bq as Se,br as je,bs as Ie,bt as Ce,bu as Ae,bv as fe,bw as Fe,bx as Te,by as De,bz as ke,bA as Ee,bB as we,bC as Re,bD as ve,bE as Be,bF as Qe,bG as xe,bH as Me,bI as Ve,bJ as qe,bK as Le,bL as Ne,bM as Oe,bN as Ue,bO as We,bP as Ge,bQ as ze,bR as He,bS as Je,bT as Ke,bU as $e,bV as Ze,bW as Xe,bX as Ye,bY as et,bZ as tt,b_ as st,b$ as at,c0 as rt,c1 as ot,c2 as ct,c3 as nt,c4 as it,c5 as dt,c6 as lt,c7 as ut,c8 as bt,c9 as ht,ca as mt,cb as gt,cc as pt,cd as _t,ce as yt,cf as Pt,cg as St,ch as jt,ci as It}from"./CPgUx9Fx.js";const Ct=Object.freeze(Object.defineProperty({__proto__:null,AbstractUserDataWriter:b,AggregateField:h,AggregateQuerySnapshot:m,Bytes:g,CACHE_SIZE_UNLIMITED:p,CollectionReference:_,DocumentReference:y,DocumentSnapshot:P,FieldPath:S,FieldValue:j,Firestore:I,FirestoreError:C,GeoPoint:A,LoadBundleTask:f,PersistentCacheIndexManager:F,Query:T,QueryCompositeFilterConstraint:D,QueryConstraint:k,QueryDocumentSnapshot:E,QueryEndAtConstraint:w,QueryFieldFilterConstraint:R,QueryLimitConstraint:v,QueryOrderByConstraint:B,QuerySnapshot:Q,QueryStartAtConstraint:x,SnapshotMetadata:M,Timestamp:V,Transaction:q,VectorValue:L,WriteBatch:N,_AutoId:O,_ByteString:U,_DatabaseId:W,_DocumentKey:G,_EmptyAppCheckTokenProvider:z,_EmptyAuthCredentialsProvider:H,_FieldPath:J,_TestingHooks:K,_cast:$,_debugAssert:Z,_internalAggregationQueryToProtoRunAggregationQueryRequest:X,_internalQueryToProtoQueryTarget:Y,_isBase64Available:ee,_logWarn:te,_validateIsNotUsedTogether:se,addDoc:ae,aggregateFieldEqual:re,aggregateQuerySnapshotEqual:oe,and:ce,arrayRemove:ne,arrayUnion:ie,average:de,clearIndexedDbPersistence:le,collection:ue,collectionGroup:be,connectFirestoreEmulator:he,count:me,deleteAllPersistentCacheIndexes:ge,deleteDoc:pe,deleteField:_e,disableNetwork:ye,disablePersistentCacheIndexAutoCreation:Pe,doc:Se,documentId:je,documentSnapshotFromJSON:Ie,enableIndexedDbPersistence:Ce,enableMultiTabIndexedDbPersistence:Ae,enableNetwork:fe,enablePersistentCacheIndexAutoCreation:Fe,endAt:Te,endBefore:De,ensureFirestoreConfigured:ke,executeWrite:Ee,getAggregateFromServer:we,getCountFromServer:Re,getDoc:ve,getDocFromCache:Be,getDocFromServer:Qe,getDocs:xe,getDocsFromCache:Me,getDocsFromServer:Ve,getFirestore:qe,getPersistentCacheIndexManager:Le,increment:Ne,initializeFirestore:Oe,limit:Ue,limitToLast:We,loadBundle:Ge,memoryEagerGarbageCollector:ze,memoryLocalCache:He,memoryLruGarbageCollector:Je,namedQuery:Ke,onSnapshot:$e,onSnapshotResume:Ze,onSnapshotsInSync:Xe,or:Ye,orderBy:et,persistentLocalCache:tt,persistentMultipleTabManager:st,persistentSingleTabManager:at,query:rt,queryEqual:ot,querySnapshotFromJSON:ct,refEqual:nt,runTransaction:it,serverTimestamp:dt,setDoc:lt,setIndexConfiguration:ut,setLogLevel:bt,snapshotEqual:ht,startAfter:mt,startAt:gt,sum:pt,terminate:_t,updateDoc:yt,vector:Pt,waitForPendingWrites:St,where:jt,writeBatch:It},Symbol.toStringTag,{value:"Module"})),ft=d("projects",{state:()=>({projects:[],currentProjectId:null,projectScores:{},checkedByProject:{},isSynced:!1}),getters:{currentProject:e=>!e.projects||!Array.isArray(e.projects)?null:e.projects.find(t=>t.id===e.currentProjectId),hasProjects:e=>e.projects&&Array.isArray(e.projects)&&e.projects.length>0,getProjectScores:e=>t=>t?e.projectScores[t]||{totalItems:0,completedItems:0,percentage:0}:{totalItems:0,completedItems:0,percentage:0},currentProjectScores:e=>e.currentProjectId?e.projectScores[e.currentProjectId]||{totalItems:0,completedItems:0,percentage:0}:{totalItems:0,completedItems:0,percentage:0},getCheckedSet:e=>t=>{const s=e.checkedByProject[t];return s?new Set(s):new Set}},actions:{async _firestoreFns(){return await u(()=>Promise.resolve().then(()=>Ct),void 0,import.meta.url)},_db(){const{$db:e}=l();return e},async subscribeUserProjects(e){if(!e)return;const t=this._db(),{collection:s,onSnapshot:a}=await this._firestoreFns(),r=s(t,"users",e,"projects");a(r,{next:o=>{const c=[];o.forEach(n=>c.push({id:n.id,...n.data()})),this.projects=c.sort((n,i)=>(i.lastModified||"").localeCompare(n.lastModified||"")),!this.currentProjectId&&this.projects.length>0&&(this.currentProjectId=this.projects[0].id),this.isSynced=!0},error:o=>{this.projects=[],this.isSynced=!1}})},async loadProjectChecked(e,t){const s=this._db(),{doc:a,getDoc:r}=await this._firestoreFns(),o=a(s,"users",e,"projects",t,"state","checked"),c=await r(o),n=c.exists()?c.data():{items:[]};this.checkedByProject[t]=new Set(n.items||[])},async saveProjectChecked(e,t){const s=this._db(),{doc:a,setDoc:r}=await this._firestoreFns(),o=a(s,"users",e,"projects",t,"state","checked"),c=Array.from(this.getCheckedSet(t));await r(o,{items:c},{merge:!0})},async addProjectRemote(e,t){const s=this._db(),{collection:a,addDoc:r}=await this._firestoreFns(),o=a(s,"users",e,"projects"),c=new Date().toISOString(),n={name:t.name,description:t.description||"",checklistType:t.checklistType||null,createdAt:c,lastModified:c},i=await r(o,n);return this.currentProjectId=i.id,{id:i.id,...n}},async updateProjectRemote(e,t,s){const a=this._db(),{doc:r,updateDoc:o}=await this._firestoreFns(),c=r(a,"users",e,"projects",t);await o(c,{...s,lastModified:new Date().toISOString()})},async deleteProjectRemote(e,t){const s=this._db(),{doc:a,deleteDoc:r}=await this._firestoreFns(),o=a(s,"users",e,"projects",t);await r(o),delete this.projectScores[t],delete this.checkedByProject[t],this.currentProjectId===t&&(this.currentProjectId=this.projects&&this.projects.length>0?this.projects[0].id:null)},setCurrentProject(e){e&&(this.currentProjectId=e)},updateProjectScores(e,t,s){const a=t>0?Math.round(s/t*100):0;this.projectScores[e]={totalItems:t,completedItems:s,percentage:a}},resetProjectScores(e){this.projectScores[e]={totalItems:0,completedItems:0,percentage:0}},calculateScoresFromItems(e,t,s){const a=t.length,r=s.size;this.updateProjectScores(e,a,r)},setCheckedForProject(e,t){this.checkedByProject[e]=new Set(t)},addCheckedItem(e,t){const s=this.getCheckedSet(e);s.add(t),this.checkedByProject[e]=s},removeCheckedItem(e,t){const s=this.getCheckedSet(e);s.delete(t),this.checkedByProject[e]=s}}});export{ft as u};
