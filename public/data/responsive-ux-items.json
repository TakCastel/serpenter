{
  "items": [
    {
      "id": "responsive-design",
      "label": "Design responsive (mobile > desktop)",
      "description": "Affichage optimisé pour toutes les tailles d'écran",
      "details": {
        "explication": "Le design responsive s'adapte automatiquement à toutes les tailles d'écran, en commençant par mobile (mobile-first).",
        "exemple": "Breakpoints : 320px, 768px, 1024px, 1440px",
        "bonnesPratiques": [
          "Approche mobile-first",
          "Breakpoints cohérents",
          "Images responsives",
          "Navigation adaptée"
        ],
        "codeExemple": {
          "css": "/* Mobile-first CSS */\n.container {\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Tablet */\n@media (min-width: 768px) {\n  .container {\n    max-width: 750px;\n    margin: 0 auto;\n  }\n}\n\n/* Desktop */\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1200px;\n  }\n}",
          "vue": "<template>\n  <div class=\"responsive-container\">\n    <div class=\"content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.responsive-container {\n  width: 100%;\n  padding: 1rem;\n}\n\n@media (min-width: 768px) {\n  .responsive-container {\n    max-width: 750px;\n    margin: 0 auto;\n  }\n}\n\n@media (min-width: 1024px) {\n  .responsive-container {\n    max-width: 1200px;\n  }\n}\n</style>"
        }
      }
    },
    {
      "id": "touch-targets",
      "label": "Taille des boutons adaptée (min. 44px)",
      "description": "Facile à cliquer sur mobile",
      "details": {
        "explication": "Les éléments tactiles doivent avoir une taille minimale de 44x44px pour être facilement cliquables sur mobile.",
        "exemple": "Boutons, liens, champs de formulaire de 44px minimum",
        "bonnesPratiques": [
          "Taille minimale 44x44px",
          "Espacement suffisant entre éléments",
          "Feedback visuel au toucher",
          "Éviter les éléments trop proches"
        ],
        "codeExemple": {
          "css": "/* Boutons tactiles optimisés */\n.touch-button {\n  min-width: 44px;\n  min-height: 44px;\n  padding: 12px 16px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n/* Espacement entre éléments */\n.touch-element {\n  margin: 8px;\n  /* Éviter les éléments trop proches */\n}",
          "vue": "<template>\n  <button \n    class=\"touch-button\" \n    @click=\"handleClick\"\n  >\n    {{ label }}\n  </button>\n</template>\n\n<style scoped>\n.touch-button {\n  min-width: 44px;\n  min-height: 44px;\n  padding: 12px 16px;\n  border: none;\n  border-radius: 8px;\n  background-color: var(--primary-color);\n  color: white;\n  font-size: 16px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n}\n\n.touch-button:active {\n  transform: scale(0.95);\n}\n</style>"
        }
      }
    },
    {
      "id": "no-horizontal-scroll",
      "label": "Pas d'éléments qui débordent / scroll horizontal",
      "description": "Sur mobile surtout",
      "details": {
        "explication": "Le contenu doit s'adapter à la largeur de l'écran sans créer de scroll horizontal, surtout sur mobile.",
        "exemple": "Images responsives, textes qui s'adaptent, tableaux scrollables",
        "bonnesPratiques": [
          "Images avec max-width: 100%",
          "Textes qui s'adaptent",
          "Tableaux avec scroll horizontal",
          "Tester sur différentes tailles"
        ],
        "codeExemple": {
          "css": "/* Éviter le scroll horizontal */\n* {\n  box-sizing: border-box;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n\n.container {\n  width: 100%;\n  overflow-x: hidden;\n}\n\n/* Tableau responsive */\n.table-container {\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n}",
          "vue": "<template>\n  <div class=\"responsive-content\">\n    <img :src=\"image.src\" :alt=\"image.alt\" class=\"responsive-image\">\n    <div class=\"text-content\">\n      {{ content }}\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.responsive-content {\n  width: 100%;\n  overflow-x: hidden;\n}\n\n.responsive-image {\n  max-width: 100%;\n  height: auto;\n}\n\n.text-content {\n  word-wrap: break-word;\n  overflow-wrap: break-word;\n}\n</style>"
        }
      }
    },
    {
      "id": "perceived-speed",
      "label": "Vitesse de chargement perçue rapide",
      "description": "Skeletons, transitions douces",
      "details": {
        "explication": "Améliorer la perception de la vitesse avec des skeletons, des transitions douces et un feedback immédiat.",
        "exemple": "Skeletons pendant le chargement, animations fluides",
        "bonnesPratiques": [
          "Utiliser des skeletons",
          "Transitions douces",
          "Feedback immédiat",
          "Optimiser les animations"
        ],
        "codeExemple": {
          "vue": "<template>\n  <div>\n    <!-- Skeleton pendant le chargement -->\n    <div v-if=\"loading\" class=\"skeleton\">\n      <div class=\"skeleton-item\"></div>\n      <div class=\"skeleton-item\"></div>\n      <div class=\"skeleton-item\"></div>\n    </div>\n    \n    <!-- Contenu réel -->\n    <div v-else class=\"content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.skeleton {\n  animation: pulse 1.5s ease-in-out infinite;\n}\n\n.skeleton-item {\n  height: 20px;\n  background: #e5e7eb;\n  margin: 8px 0;\n  border-radius: 4px;\n}\n\n@keyframes pulse {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.5; }\n}\n\n.content {\n  animation: fadeIn 0.3s ease-in;\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; transform: translateY(10px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n</style>",
          "css": "/* Transitions douces */\n.fade-enter-active, .fade-leave-active {\n  transition: opacity 0.3s ease;\n}\n\n.fade-enter, .fade-leave-to {\n  opacity: 0;\n}\n\n/* Skeleton animation */\n@keyframes shimmer {\n  0% { background-position: -200px 0; }\n  100% { background-position: calc(200px + 100%) 0; }\n}\n\n.skeleton {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200px 100%;\n  animation: shimmer 1.5s infinite;\n}"
        }
      }
    },
    {
      "id": "mobile-first",
      "label": "Approche mobile-first",
      "description": "Conception pensée mobile en premier",
      "details": {
        "explication": "L'approche mobile-first consiste à concevoir d'abord pour mobile, puis d'ajouter des fonctionnalités pour les écrans plus grands.",
        "exemple": "CSS mobile-first, navigation adaptée, contenu priorisé",
        "bonnesPratiques": [
          "Commencer par mobile",
          "Contenu priorisé",
          "Navigation simplifiée",
          "Performance mobile"
        ],
        "codeExemple": {
          "css": "/* Mobile-first CSS */\n.nav {\n  /* Styles de base pour mobile */\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n}\n\n.nav-item {\n  padding: 0.5rem;\n  border-bottom: 1px solid #eee;\n}\n\n/* Desktop styles */\n@media (min-width: 768px) {\n  .nav {\n    flex-direction: row;\n    padding: 0;\n  }\n  \n  .nav-item {\n    padding: 1rem;\n    border-bottom: none;\n  }\n}",
          "vue": "<template>\n  <nav class=\"mobile-first-nav\">\n    <button \n      @click=\"toggleMenu\" \n      class=\"menu-toggle\"\n      aria-label=\"Menu\"\n    >\n      ☰\n    </button>\n    \n    <div \n      :class=\"{ 'nav-menu': true, 'open': isMenuOpen }\"\n    >\n      <NuxtLink \n        v-for=\"item in menuItems\" \n        :key=\"item.path\" \n        :to=\"item.path\" \n        class=\"nav-item\"\n        @click=\"closeMenu\"\n      >\n        {{ item.label }}\n      </NuxtLink>\n    </div>\n  </nav>\n</template>"
        }
      }
    },
    {
      "id": "touch-friendly",
      "label": "Éléments tactiles optimisés",
      "description": "Boutons et liens facilement cliquables",
      "details": {
        "explication": "Tous les éléments interactifs doivent être optimisés pour le tactile avec une taille suffisante et un feedback approprié.",
        "exemple": "Boutons 44px+, espacement suffisant, feedback visuel",
        "bonnesPratiques": [
          "Taille minimale 44x44px",
          "Espacement de 8px minimum",
          "Feedback visuel immédiat",
          "Éviter les éléments trop petits"
        ],
        "codeExemple": {
          "css": "/* Éléments tactiles optimisés */\n.touch-friendly {\n  min-width: 44px;\n  min-height: 44px;\n  padding: 12px 16px;\n  margin: 4px;\n  border-radius: 8px;\n  transition: all 0.2s ease;\n  -webkit-tap-highlight-color: transparent;\n}\n\n.touch-friendly:active {\n  transform: scale(0.95);\n  background-color: var(--bg-hover);\n}\n\n/* Désactiver le highlight sur mobile */\n* {\n  -webkit-tap-highlight-color: transparent;\n}",
          "vue": "<template>\n  <div class=\"touch-interface\">\n    <button \n      v-for=\"action in actions\" \n      :key=\"action.id\"\n      @click=\"handleAction(action.id)\"\n      @touchstart=\"handleTouchStart\"\n      @touchend=\"handleTouchEnd\"\n      class=\"touch-button\"\n      :class=\"{ 'active': activeButton === action.id }\"\n    >\n      {{ action.label }}\n    </button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      activeButton: null,\n      actions: [\n        { id: 1, label: 'Action 1' },\n        { id: 2, label: 'Action 2' }\n      ]\n    }\n  },\n  methods: {\n    handleTouchStart(event) {\n      this.activeButton = event.target.dataset.id\n    },\n    handleTouchEnd() {\n      this.activeButton = null\n    }\n  }\n}\n</script>"
        }
      }
    }
  ]
} 