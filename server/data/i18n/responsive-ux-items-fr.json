{
  "items": [
    {
      "id": "design-responsive",
      "label": "Design responsive (mobile > desktop)",
      "description": "Affichage optimisé pour toutes les tailles d'écran",
      "details": {
        "explication": "Le design responsive s'adapte automatiquement à toutes les tailles d'écran, du mobile au desktop. L'approche mobile-first privilégie l'expérience sur mobile, puis améliore pour les écrans plus grands.",
        "commentFaire": [
          "Utilisez 'Chrome DevTools' → Device Toolbar pour tester les breakpoints",
          "Testez avec 'Responsive Design Checker' pour voir votre site sur différents appareils",
          "Vérifiez avec 'Lighthouse' → Performance → Mobile",
          "Analysez avec 'BrowserStack' pour tester sur de vrais appareils"
        ],
        "outils": [
          {
            "nom": "Chrome DevTools",
            "url": "https://developers.google.com/web/tools/chrome-devtools",
            "description": "Testez le responsive avec l'outil Device Toolbar"
          },
          {
            "nom": "Responsive Design Checker",
            "url": "https://responsivedesignchecker.com/",
            "description": "Vérifiez votre site sur différentes tailles d'écran"
          },
          {
            "nom": "BrowserStack",
            "url": "https://www.browserstack.com/",
            "description": "Testez sur de vrais appareils et navigateurs"
          }
        ],
        "bonnesPratiques": [
          "Approche mobile-first",
          "Breakpoints cohérents (320px, 768px, 1024px, 1440px)",
          "Images et médias responsives",
          "Navigation adaptée au mobile",
          "Texte lisible sur tous les écrans"
        ],
        "exemple": {
          "html": "/* CSS Mobile-first */\n.container {\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Tablette (768px+) */\n@media (min-width: 768px) {\n  .container {\n    max-width: 750px;\n    margin: 0 auto;\n  }\n}\n\n/* Desktop (1024px+) */\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1200px;\n  }\n}\n\n/* Images responsives */\nimg {\n  max-width: 100%;\n  height: auto;\n}",
          "description": "Exemple de CSS mobile-first avec breakpoints et images responsives"
        }
      }
    },
    {
      "id": "boutons-adaptes",
      "label": "Taille des boutons adaptée (min. 44px)",
      "description": "Facile à cliquer sur mobile",
      "details": {
        "explication": "Les boutons et éléments cliquables doivent être suffisamment grands pour être facilement utilisables sur mobile. La taille minimum recommandée est de 44x44px pour respecter les guidelines d'accessibilité.",
        "commentFaire": [
          "Mesurez vos boutons avec 'Chrome DevTools' → Inspect",
          "Testez avec 'Touch Target Size Checker' pour vérifier les tailles",
          "Vérifiez avec 'Lighthouse' → Accessibility → Touch targets",
          "Analysez avec 'axe DevTools' pour détecter les cibles trop petites"
        ],
        "outils": [
          {
            "nom": "Touch Target Size Checker",
            "url": "https://chrome.google.com/webstore/detail/touch-target-size-checker/kkebgegbbimeefdmdlkkhacceikcndj",
            "description": "Extension pour vérifier la taille des éléments cliquables"
          },
          {
            "nom": "axe DevTools",
            "url": "https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd",
            "description": "Détecte les cibles tactiles trop petites"
          },
          {
            "nom": "Lighthouse",
            "url": "https://developers.google.com/web/tools/lighthouse",
            "description": "Audit d'accessibilité avec vérification des cibles tactiles"
          }
        ],
        "bonnesPratiques": [
          "Taille minimum 44x44px",
          "Espacement suffisant entre les éléments",
          "Feedback visuel au toucher",
          "Éviter les éléments trop proches",
          "Tester sur de vrais appareils"
        ],
        "exemple": {
          "html": "/* Boutons adaptés au mobile */\n.button {\n  min-width: 44px;\n  min-height: 44px;\n  padding: 12px 24px;\n  font-size: 16px;\n  border-radius: 8px;\n}\n\n/* Navigation mobile */\n.nav-item {\n  display: block;\n  padding: 16px;\n  min-height: 44px;\n  margin: 4px 0;\n}\n\n/* Boutons trop petits */\n.small-button {\n  width: 20px;\n  height: 20px;\n  /* Trop petit pour mobile */\n}",
          "description": "Exemples de boutons adaptés vs trop petits pour mobile"
        }
      }
    },
    {
      "id": "pas-debordement",
      "label": "Pas d'éléments qui débordent / scroll horizontal",
      "description": "Sur mobile surtout",
      "details": {
        "explication": "Le scroll horizontal est une mauvaise expérience utilisateur, surtout sur mobile. Tous les éléments doivent s'adapter à la largeur de l'écran sans créer de débordement horizontal.",
        "commentFaire": [
          "Testez avec 'Chrome DevTools' → Device Toolbar → Toggle device toolbar",
          "Utilisez 'Responsive Design Checker' pour voir les débordements",
          "Vérifiez avec 'Lighthouse' → Performance → Avoid horizontal scrolling",
          "Analysez avec 'axe DevTools' pour détecter les problèmes de layout"
        ],
        "outils": [
          {
            "nom": "Chrome DevTools",
            "url": "https://developers.google.com/web/tools/chrome-devtools",
            "description": "Testez le responsive et détectez les débordements"
          },
          {
            "nom": "Responsive Design Checker",
            "url": "https://responsivedesignchecker.com/",
            "description": "Vérifiez votre site sur différentes tailles d'écran"
          },
          {
            "nom": "axe DevTools",
            "url": "https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd",
            "description": "Détecte les problèmes de layout et débordements"
          }
        ],
        "bonnesPratiques": [
          "Utiliser width: 100% et max-width",
          "Éviter les largeurs fixes en pixels",
          "Utiliser flexbox et grid responsivement",
          "Tester sur différentes tailles d'écran",
          "Vérifier les tableaux et images"
        ],
        "exemple": {
          "html": "/* Layout responsive sans débordement */\n.container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 1rem;\n  box-sizing: border-box;\n}\n\n.content {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.item {\n  flex: 1 1 300px;\n  min-width: 0;\n}\n\n/* Images responsives */\nimg {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}",
          "description": "CSS pour éviter les débordements horizontaux"
        }
      }
    },
    {
      "id": "vitesse-percue",
      "label": "Vitesse de chargement perçue rapide",
      "description": "Skeletons, transitions douces",
      "details": {
        "explication": "La vitesse perçue est plus importante que la vitesse réelle. Utiliser des skeletons, des transitions douces et des optimisations visuelles donne l'impression d'un site plus rapide.",
        "commentFaire": [
          "Implémentez des skeletons avec 'Skeleton Screen' ou 'Content Placeholder'",
          "Testez avec 'Lighthouse' → Performance → First Contentful Paint",
          "Vérifiez avec 'WebPageTest' pour mesurer les métriques de performance",
          "Analysez avec 'Chrome DevTools' → Performance pour optimiser"
        ],
        "outils": [
          {
            "nom": "Lighthouse",
            "url": "https://developers.google.com/web/tools/lighthouse",
            "description": "Mesurez les métriques de performance perçue"
          },
          {
            "nom": "WebPageTest",
            "url": "https://www.webpagetest.org/",
            "description": "Analysez les métriques de performance détaillées"
          },
          {
            "nom": "Chrome DevTools",
            "url": "https://developers.google.com/web/tools/chrome-devtools",
            "description": "Analysez les performances avec l'onglet Performance"
          }
        ],
        "bonnesPratiques": [
          "Afficher des skeletons pendant le chargement",
          "Utiliser des transitions CSS fluides",
          "Optimiser le First Contentful Paint",
          "Précharger les ressources critiques",
          "Utiliser le lazy loading"
        ],
        "exemple": {
          "html": "/* Skeleton loading */\n.skeleton {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n  animation: loading 1.5s infinite;\n  border-radius: 4px;\n}\n\n@keyframes loading {\n  0% { background-position: 200% 0; }\n  100% { background-position: -200% 0; }\n}\n\n/* Transitions douces */\n.fade-in {\n  opacity: 0;\n  animation: fadeIn 0.3s ease-in forwards;\n}\n\n@keyframes fadeIn {\n  to { opacity: 1; }\n}",
          "description": "Exemples de skeletons et transitions pour améliorer la vitesse perçue"
        }
      }
    }
  ]
}
