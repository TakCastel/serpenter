{
  "items": [
    {
      "id": "https",
      "label": "Site en HTTPS",
      "description": "Certificat SSL actif",
      "details": {
        "explication": "HTTPS chiffre les données échangées entre le navigateur et le serveur, protégeant la confidentialité et l'intégrité des informations. C'est maintenant un standard obligatoire pour tous les sites web.",
        "commentFaire": [
          "Vérifiez votre certificat SSL avec 'SSL Checker'",
          "Testez avec 'SSL Labs' pour évaluer la qualité de votre SSL",
          "Vérifiez avec 'Lighthouse' → Security → HTTPS",
          "Analysez avec 'Security Headers' pour voir vos headers de sécurité"
        ],
        "outils": [
          {
            "nom": "SSL Checker",
            "url": "https://www.sslshopper.com/ssl-checker.html",
            "description": "Vérifiez la validité de votre certificat SSL"
          },
          {
            "nom": "SSL Labs",
            "url": "https://www.ssllabs.com/ssltest/",
            "description": "Test complet de votre configuration SSL"
          },
          {
            "nom": "Security Headers",
            "url": "https://securityheaders.com/",
            "description": "Analysez vos headers de sécurité"
          }
        ],
        "bonnesPratiques": [
          "Certificat SSL valide et à jour",
          "Redirection automatique HTTP → HTTPS",
          "HSTS (HTTP Strict Transport Security)",
          "Certificat pour tous les sous-domaines",
          "Vérifier la chaîne de confiance"
        ],
        "exemple": {
          "html": "<!-- Redirection HTTPS dans .htaccess -->\nRewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n\n<!-- Headers de sécurité -->\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\nHeader always set X-Content-Type-Options nosniff\nHeader always set X-Frame-Options DENY",
          "description": "Configuration Apache pour HTTPS et headers de sécurité"
        }
      }
    },
    {
      "id": "csp-policy",
      "label": "Content Security Policy (CSP) configurée",
      "description": "Protection contre les attaques XSS",
      "details": {
        "explication": "La CSP définit quelles ressources (scripts, styles, images) peuvent être chargées par le navigateur. Elle protège contre les attaques XSS en contrôlant l'exécution de code malveillant.",
        "commentFaire": [
          "Vérifiez votre CSP avec 'CSP Evaluator'",
          "Testez avec 'Security Headers' pour analyser votre politique",
          "Utilisez 'CSP Scanner' pour détecter les violations",
          "Analysez avec 'Lighthouse' → Security → CSP"
        ],
        "bonnesPratiques": [
          "Définir une politique stricte mais fonctionnelle",
          "Utiliser 'self' pour les ressources internes",
          "Éviter 'unsafe-inline' quand possible",
          "Tester en mode report-only d'abord",
          "Surveiller les violations"
        ],
        "exemple": {
          "html": "<!-- Headers CSP -->\nContent-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' https:;\n\n<!-- CSP en mode report-only -->\nContent-Security-Policy-Report-Only: default-src 'self'; report-uri /csp-report;",
          "description": "Exemple de configuration CSP stricte avec mode report-only"
        }
      }
    },
    {
      "id": "rate-limiting",
      "label": "Rate limiting configuré",
      "description": "Protection contre les attaques par force brute",
      "details": {
        "explication": "Le rate limiting limite le nombre de requêtes qu'un utilisateur peut faire dans un délai donné. Il protège contre les attaques par force brute, le spam et la surcharge du serveur.",
        "commentFaire": [
          "Configurez le rate limiting sur votre serveur web",
          "Testez avec 'Load Impact' pour simuler des attaques",
          "Vérifiez avec 'Apache Bench' pour tester les limites",
          "Analysez les logs pour détecter les abus"
        ],
        "outils": [
          {
            "nom": "Load Impact",
            "url": "https://loadimpact.com/",
            "description": "Testez votre site sous charge"
          },
          {
            "nom": "Apache Bench",
            "url": "https://httpd.apache.org/docs/2.4/programs/ab.html",
            "description": "Testez les performances et limites de votre serveur"
          },
          {
            "nom": "Fail2ban",
            "url": "https://www.fail2ban.org/",
            "description": "Protection automatique contre les attaques"
          }
        ],
        "bonnesPratiques": [
          "Limiter les tentatives de connexion",
          "Protéger les formulaires sensibles",
          "Configurer des délais progressifs",
          "Surveiller les logs d'accès",
          "Alerter en cas d'attaque"
        ],
        "exemple": {
          "apache": "# .htaccess - Rate limiting\n<IfModule mod_ratelimit.c>\n  SetOutputFilter RATE_LIMIT\n  SetEnv rate-limit 400\n</IfModule>\n\n# Protection des formulaires\n<Location \"/login\">\n  SetEnv rate-limit 10\n</Location>",
          "nginx": "# nginx.conf - Rate limiting\nlimit_req_zone $binary_remote_addr zone=login:10m rate=10r/m;\n\nlocation /login {\n  limit_req zone=login burst=5 nodelay;\n}",
          "description": "Configuration du rate limiting pour Apache et Nginx"
        }
      }
    },
    {
      "id": "file-upload-security",
      "label": "Sécurisation des uploads de fichiers",
      "description": "Validation et restriction des types de fichiers",
      "details": {
        "explication": "Les uploads de fichiers peuvent être une porte d'entrée pour des attaques. Il faut valider les types de fichiers, limiter les tailles, scanner les contenus et stocker les fichiers de manière sécurisée.",
        "commentFaire": [
          "Vérifiez vos formulaires d'upload avec 'OWASP ZAP'",
          "Testez avec 'Burp Suite' pour les vulnérabilités d'upload",
          "Analysez avec 'File Upload Security Checker'",
          "Vérifiez la configuration de votre serveur"
        ],
        "outils": [
          {
            "nom": "OWASP ZAP",
            "url": "https://owasp.org/www-project-zap/",
            "description": "Testez les vulnérabilités d'upload"
          },
          {
            "nom": "Burp Suite Community",
            "url": "https://portswigger.net/burp/communitydownload",
            "description": "Analysez les uploads de fichiers"
          },
          {
            "nom": "File Upload Security Checker",
            "url": "https://www.owasp.org/index.php/Unrestricted_File_Upload",
            "description": "Guide de sécurisation des uploads"
          }
        ],
        "bonnesPratiques": [
          "Valider les extensions et MIME types",
          "Limiter la taille des fichiers",
          "Scanner les fichiers avec un antivirus",
          "Stocker hors de la racine web",
          "Générer des noms de fichiers uniques"
        ],
        "exemple": {
          "php": "<?php\n// Validation des uploads\n$allowed_types = ['image/jpeg', 'image/png', 'image/gif'];\n$max_size = 5 * 1024 * 1024; // 5MB\n\nif ($_FILES['upload']['error'] === UPLOAD_ERR_OK) {\n  $file_info = finfo_open(FILEINFO_MIME_TYPE);\n  $mime_type = finfo_file($file_info, $_FILES['upload']['tmp_name']);\n  \n  if (!in_array($mime_type, $allowed_types)) {\n    die('Type de fichier non autorisé');\n  }\n  \n  if ($_FILES['upload']['size'] > $max_size) {\n    die('Fichier trop volumineux');\n  }\n  \n  $filename = uniqid() . '_' . basename($_FILES['upload']['name']);\n  move_uploaded_file($_FILES['upload']['tmp_name'], '/secure/uploads/' . $filename);\n}\n?>",
          "description": "Validation sécurisée des uploads de fichiers en PHP"
        }
      }
    },
     {
      "id": "headers-securite",
      "label": "Headers de sécurité configurés",
      "description": "Content-Security-Policy, etc.",
      "details": {
        "explication": "Les headers de sécurité HTTP protègent contre diverses attaques (XSS, clickjacking, MIME sniffing). Ils sont configurés côté serveur et s'appliquent à toutes les pages du site.",
        "commentFaire": [
          "Vérifiez vos headers avec 'Security Headers'",
          "Testez avec 'Mozilla Observatory' pour un audit complet",
          "Utilisez 'Lighthouse' → Security → Security headers",
          "Analysez avec 'Security Headers Checker' pour des recommandations"
        ]}
    },
    {
      "id": "protection-injection",
      "label": "Protection basique contre l'injection",
      "description": "Éviter l'input non filtré",
      "details": {
        "explication": "Les attaques par injection (XSS, SQL injection) exploitent les entrées utilisateur non filtrées. Il faut valider, échapper et filtrer toutes les données entrées par les utilisateurs.",
        "commentFaire": [
          "Utilisez 'OWASP ZAP' pour tester les vulnérabilités d'injection",
          "Testez avec 'Burp Suite Community' pour l'audit de sécurité",
          "Vérifiez avec 'Lighthouse' → Security → XSS protection",
          "Analysez avec 'Security Headers' pour les protections CSP"
        ],
        "outils": [
          {
            "nom": "OWASP ZAP",
            "url": "https://owasp.org/www-project-zap/",
            "description": "Scanner de vulnérabilités web gratuit"
          },
          {
            "nom": "Burp Suite Community",
            "url": "https://portswigger.net/burp/communitydownload",
            "description": "Outil d'audit de sécurité web"
          },
          {
            "nom": "Security Headers",
            "url": "https://securityheaders.com/",
            "description": "Vérifiez vos protections XSS"
          }
        ],
        "bonnesPratiques": [
          "Valider toutes les entrées utilisateur",
          "Échapper les données avant affichage",
          "Utiliser des requêtes préparées (SQL)",
          "Implémenter CSP strict",
          "Tester régulièrement les vulnérabilités"
        ],
        "exemple": {
          "html": "<!-- Protection XSS côté client -->\n<script>\n// Échapper le HTML\nfunction escapeHtml(text) {\n  const div = document.createElement('div');\n  div.textContent = text;\n  return div.innerHTML;\n}\n\n// Utilisation sécurisée\ndocument.getElementById('output').innerHTML = escapeHtml(userInput);\n</script>\n\n<!-- Protection côté serveur (PHP) -->\n<?php\n// Échapper les données\n$safeOutput = htmlspecialchars($userInput, ENT_QUOTES, 'UTF-8');\necho $safeOutput;\n\n// Requête préparée (SQL)\n$stmt = $pdo->prepare('SELECT * FROM users WHERE id = ?');\n$stmt->execute([$userId]);\n?>",
          "description": "Exemples de protection contre les injections XSS et SQL"
        }
      }
    }
  ]
}
