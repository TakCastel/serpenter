{
  "items": [
    {
      "id": "design-responsive",
      "label": "Responsive design (mobile > desktop)",
      "description": "Display optimized for all screen sizes",
      "details": {
        "explication": "Responsive design automatically adapts to all screen sizes, from mobile to desktop. The mobile-first approach prioritizes the mobile experience, then improves for larger screens.",
        "commentFaire": [
          "Use 'Chrome DevTools' → Device Toolbar to test breakpoints",
          "Test with 'Responsive Design Checker' to see your site on different devices",
          "Check with 'Lighthouse' → Performance → Mobile",
          "Analyze with 'BrowserStack' to test on real devices"
        ],
        "outils": [
          {
            "nom": "Chrome DevTools",
            "url": "https://developers.google.com/web/tools/chrome-devtools",
            "description": "Test responsive with Device Toolbar"
          },
          {
            "nom": "Responsive Design Checker",
            "url": "https://responsivedesignchecker.com/",
            "description": "Check your site on different screen sizes"
          },
          {
            "nom": "BrowserStack",
            "url": "https://www.browserstack.com/",
            "description": "Test on real devices and browsers"
          }
        ],
        "bonnesPratiques": [
          "Mobile-first approach",
          "Consistent breakpoints (320px, 768px, 1024px, 1440px)",
          "Responsive images and media",
          "Mobile-adapted navigation",
          "Readable text on all screens"
        ],
        "exemple": {
          "html": "/* Mobile-first CSS */\n.container {\n  width: 100%;\n  padding: 1rem;\n}\n\n/* Tablet (768px+) */\n@media (min-width: 768px) {\n  .container {\n    max-width: 750px;\n    margin: 0 auto;\n  }\n}\n\n/* Desktop (1024px+) */\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1200px;\n  }\n}\n\n/* Responsive images */\nimg {\n  max-width: 100%;\n  height: auto;\n}",
          "description": "Example of mobile-first CSS with breakpoints and responsive images"
        }
      }
    },
    {
      "id": "boutons-adaptes",
      "label": "Adapted button size (min. 44px)",
      "description": "Easy to click on mobile",
      "details": {
        "explication": "Buttons and clickable elements must be large enough to be easily usable on mobile. The recommended minimum size is 44x44px to comply with accessibility guidelines.",
        "commentFaire": [
          "Measure your buttons with 'Chrome DevTools' → Inspect",
          "Test with 'Touch Target Size Checker' to verify sizes",
          "Check with 'Lighthouse' → Accessibility → Touch targets",
          "Analyze with 'axe DevTools' to detect targets that are too small"
        ],
        "outils": [
          {
            "nom": "Touch Target Size Checker",
            "url": "https://chrome.google.com/webstore/detail/touch-target-size-checker/kkebgegbbimeefdmdlkkhacceikcndj",
            "description": "Extension to check clickable element sizes"
          },
          {
            "nom": "axe DevTools",
            "url": "https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd",
            "description": "Detects touch targets that are too small"
          },
          {
            "nom": "Lighthouse",
            "url": "https://developers.google.com/web/tools/lighthouse",
            "description": "Accessibility audit with touch target verification"
          }
        ],
        "bonnesPratiques": [
          "Minimum size 44x44px",
          "Sufficient spacing between elements",
          "Visual feedback on touch",
          "Avoid elements that are too close",
          "Test on real devices"
        ],
        "exemple": {
          "html": "/* Mobile-adapted buttons */\n.button {\n  min-width: 44px;\n  min-height: 44px;\n  padding: 12px 24px;\n  font-size: 16px;\n  border-radius: 8px;\n}\n\n/* Mobile navigation */\n.nav-item {\n  display: block;\n  padding: 16px;\n  min-height: 44px;\n  margin: 4px 0;\n}\n\n/* Buttons too small */\n.small-button {\n  width: 20px;\n  height: 20px;\n  /* Too small for mobile */\n}",
          "description": "Examples of adapted vs too small buttons for mobile"
        }
      }
    },
    {
      "id": "pas-debordement",
      "label": "No overflowing elements / horizontal scroll",
      "description": "Especially on mobile",
      "details": {
        "explication": "Horizontal scrolling is a poor user experience, especially on mobile. All elements must adapt to the screen width without creating horizontal overflow.",
        "commentFaire": [
          "Test with 'Chrome DevTools' → Device Toolbar → Toggle device toolbar",
          "Use 'Responsive Design Checker' to see overflows",
          "Check with 'Lighthouse' → Performance → Avoid horizontal scrolling",
          "Analyze with 'axe DevTools' to detect layout problems"
        ],
        "outils": [
          {
            "nom": "Chrome DevTools",
            "url": "https://developers.google.com/web/tools/chrome-devtools",
            "description": "Test responsive and detect overflows"
          },
          {
            "nom": "Responsive Design Checker",
            "url": "https://responsivedesignchecker.com/",
            "description": "Check your site on different screen sizes"
          },
          {
            "nom": "axe DevTools",
            "url": "https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd",
            "description": "Detects layout problems and overflows"
          }
        ],
        "bonnesPratiques": [
          "Use width: 100% and max-width",
          "Avoid fixed widths in pixels",
          "Use flexbox and grid responsively",
          "Test on different screen sizes",
          "Check tables and images"
        ],
        "exemple": {
          "html": "/* Responsive layout without overflow */\n.container {\n  width: 100%;\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 1rem;\n  box-sizing: border-box;\n}\n\n.content {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n}\n\n.item {\n  flex: 1 1 300px;\n  min-width: 0;\n}\n\n/* Responsive images */\nimg {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}",
          "description": "CSS to avoid horizontal overflows"
        }
      }
    },
    {
      "id": "vitesse-percue",
      "label": "Fast perceived loading speed",
      "description": "Skeletons, smooth transitions",
      "details": {
        "explication": "Perceived speed is more important than actual speed. Using skeletons, smooth transitions and visual optimizations gives the impression of a faster site.",
        "commentFaire": [
          "Implement skeletons with 'Skeleton Screen' or 'Content Placeholder'",
          "Test with 'Lighthouse' → Performance → First Contentful Paint",
          "Check with 'WebPageTest' to measure performance metrics",
          "Analyze with 'Chrome DevTools' → Performance to optimize"
        ],
        "outils": [
          {
            "nom": "Lighthouse",
            "url": "https://developers.google.com/web/tools/lighthouse",
            "description": "Measure perceived performance metrics"
          },
          {
            "nom": "WebPageTest",
            "url": "https://www.webpagetest.org/",
            "description": "Analyze detailed performance metrics"
          },
          {
            "nom": "Chrome DevTools",
            "url": "https://developers.google.com/web/tools/chrome-devtools",
            "description": "Analyze performance with Performance tab"
          }
        ],
        "bonnesPratiques": [
          "Display skeletons during loading",
          "Use smooth CSS transitions",
          "Optimize First Contentful Paint",
          "Preload critical resources",
          "Use lazy loading"
        ],
        "exemple": {
          "html": "/* Skeleton loading */\n.skeleton {\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\n  background-size: 200% 100%;\n  animation: loading 1.5s infinite;\n  border-radius: 4px;\n}\n\n@keyframes loading {\n  0% { background-position: 200% 0; }\n  100% { background-position: -200% 0; }\n}\n\n/* Smooth transitions */\n.fade-in {\n  opacity: 0;\n  animation: fadeIn 0.3s ease-in forwards;\n}\n\n@keyframes fadeIn {\n  to { opacity: 1; }\n}",
          "description": "Examples of skeletons and transitions to improve perceived speed"
        }
      }
    }
  ]
}
