{
  "items": [
    {
      "id": "contraste",
      "label": "Sufficient contrast (WCAG AA minimum)",
      "description": "Readable text on dark or light background",
      "details": {
        "explication": "The contrast between text and background must be sufficient to be readable by all users, including those with visual impairments. WCAG AA level requires a minimum contrast ratio of 4.5:1 for normal text and 3:1 for large text.",
        "commentFaire": [
          "Use 'WebAIM Contrast Checker' tool to test your colors",
          "Test with Chrome extension 'Color Contrast Analyzer'",
          "Check with 'Lighthouse' in DevTools → Accessibility",
          "Use 'axe DevTools' for complete accessibility audit"
        ],
        "bonnesPratiques": [
          "Minimum contrast ratio 4.5:1 (normal text)",
          "Minimum contrast ratio 3:1 (large text)",
          "Test with different types of color blindness",
          "Check on screens of different qualities",
          "Include alternatives for colors"
        ],
        "exemple": {
          "html": "/* Good contrast */\n.text-primary {\n  color: #1a1a1a;\n  background-color: #ffffff;\n  /* Ratio: 15.6:1 */\n}\n\n/* Bad contrast */\n.text-secondary {\n  color: #666666;\n  background-color: #ffffff;\n  /* Ratio: 2.8:1 */\n}",
          "description": "Examples of WCAG AA compliant vs non-compliant contrasts"
        }
      }
    },
    {
      "id": "navigation-clavier",
      "label": "Functional keyboard navigation",
      "description": "Visible focus, consistent tab-index",
      "details": {
        "explication": "All interactive elements must be keyboard accessible and have a visible focus indicator. The tab order must be logical and consistent with the visual structure of the page.",
        "commentFaire": [
          "Test navigation with Tab, Shift+Tab, Enter, Space",
          "Use 'Focus Indicator' extension to visualize focus",
          "Check with 'axe DevTools' → Keyboard navigation",
          "Test with 'Lighthouse' → Accessibility → Keyboard navigation"
        ],
        "bonnesPratiques": [
          "All clickable elements keyboard accessible",
          "Visible and contrasted focus indicator",
          "Logical tab order",
          "No keyboard traps",
          "Consistent keyboard shortcuts"
        ],
        "exemple": {
          "html": "/* Visible focus */\nbutton:focus {\n  outline: 2px solid #007acc;\n  outline-offset: 2px;\n}\n\n/* Logical tab order */\n<nav>\n  <a href=\"#\" tabindex=\"0\">Home</a>\n  <a href=\"#\" tabindex=\"0\">Services</a>\n  <a href=\"#\" tabindex=\"0\">Contact</a>\n</nav>",
          "description": "CSS styles for visible focus and HTML structure for keyboard navigation"
        }
      }
    },
    {
      "id": "labels-formulaires",
      "label": "Explicit labels for form fields",
      "description": "Ex: <label for=\"email\">Email</label>",
      "details": {
        "explication": "Each form field must have an explicit label associated via the 'for' attribute or using the encompassing <label> element. This improves accessibility for screen readers and user experience.",
        "commentFaire": [
          "Inspect your forms (F12) → Look for <label> tags",
          "Use 'axe DevTools' extension → Forms",
          "Test with a screen reader (NVDA, JAWS, VoiceOver)",
          "Check with 'Lighthouse' → Accessibility → Form labels"
        ],
        "bonnesPratiques": [
          "Explicit and descriptive label",
          "Association via 'for' attribute or encompassing",
          "Placeholder does not replace label",
          "Labels for all field types",
          "Accessible error messages"
        ],
        "exemple": {
          "html": "<!-- Explicit label -->\n<div>\n  <label for=\"email\">Email address</label>\n  <input type=\"email\" id=\"email\" name=\"email\" required>\n</div>\n\n<!-- Encompassing label -->\n<label>\n  Password\n  <input type=\"password\" name=\"password\" required>\n</label>",
          "description": "Examples of explicit and accessible labels for forms"
        }
      }
    },
    {
      "id": "aria-labels-roles",
      "label": "Appropriate ARIA attributes",
      "description": "Roles, labels, and states for complex elements",
      "details": {
        "explication": "ARIA (Accessible Rich Internet Applications) attributes improve accessibility of complex elements like menus, accordions, sliders, etc. They provide additional information to screen readers.",
        "commentFaire": [
          "Inspect complex elements → Check ARIA attributes",
          "Use 'axe DevTools' extension → ARIA",
          "Test with a screen reader (NVDA, JAWS, VoiceOver)",
          "Check with 'Lighthouse' → Accessibility → ARIA attributes"
        ],
        "bonnesPratiques": [
          "Use role=\"button\" for clickable elements",
          "Use aria-label for elements without text",
          "Use aria-expanded for accordions",
          "Use aria-hidden=\"true\" for decorative content",
          "Avoid redundant roles with HTML elements"
        ],
        "exemple": {
          "html": "<!-- Button with ARIA -->\n<button aria-label=\"Close modal\" onclick=\"closeModal()\">\n  <span aria-hidden=\"true\">×</span>\n</button>\n\n<!-- Accordion with ARIA -->\n<div role=\"button\" aria-expanded=\"false\" aria-controls=\"content-1\">\n  Accordion title\n</div>\n<div id=\"content-1\" aria-hidden=\"true\">\n  Accordion content\n</div>\n\n<!-- Navigation with ARIA -->\n<nav role=\"navigation\" aria-label=\"Main menu\">\n  <ul>\n    <li><a href=\"/\">Home</a></li>\n    <li><a href=\"/services\">Services</a></li>\n  </ul>\n</nav>",
          "description": "Examples of appropriate use of ARIA attributes"
        }
      }
    },
    {
      "id": "skip-links",
      "label": "Skip links",
      "description": "Links to skip navigation and go to content",
      "details": {
        "explication": "Skip links allow keyboard users to jump directly to the main content, avoiding navigation through all navigation elements. They are essential for accessibility.",
        "commentFaire": [
          "Add skip links at the beginning of your page",
          "Test with Tab → Check that links appear",
          "Use 'axe DevTools' extension → Skip links",
          "Test with a screen reader (NVDA, JAWS, VoiceOver)"
        ],
        "bonnesPratiques": [
          "Links visible on focus only",
          "Position at top of page",
          "Links to main content and navigation",
          "Distinct and visible style",
          "Test with keyboard and screen reader"
        ],
        "exemple": {
          "html": "<!-- Skip links -->\n<a href=\"#main-content\" class=\"skip-link\">Go to main content</a>\n<a href=\"#navigation\" class=\"skip-link\">Go to navigation</a>\n\n<!-- CSS for skip links -->\n.skip-link {\n  position: absolute;\n  top: -40px;\n  left: 6px;\n  background: #000;\n  color: #fff;\n  padding: 8px;\n  text-decoration: none;\n  z-index: 1000;\n}\n\n.skip-link:focus {\n  top: 6px;\n}\n\n<!-- Main content with ID -->\n<main id=\"main-content\">\n  <h1>Main content</h1>\n  <p>Page content...</p>\n</main>",
          "description": "Example of skip links with CSS and HTML structure"
        }
      }
    },
    {
      "id": "color-blindness",
      "label": "Test with different types of color blindness",
      "description": "Check readability for color blind users",
      "details": {
        "explication": "About 8% of men and 0.5% of women are color blind. It's important to test your site with different types of color blindness to ensure information is not conveyed solely through color.",
        "commentFaire": [
          "Use 'Colorblindly' extension to simulate color blindness",
          "Test with 'axe DevTools' → Color contrast",
          "Check that information doesn't depend solely on color",
          "Use 'Lighthouse' → Accessibility → Color contrast"
        ],
        "bonnesPratiques": [
          "Don't convey information solely through color",
          "Use icons or text in addition to colors",
          "Test with protanopia, deuteranopia, tritanopia",
          "Check graphs and diagrams",
          "Ensure links are identifiable without color"
        ],
        "exemple": {
          "html": "<!-- Good: Information by color AND icon -->\n<div class=\"status\">\n  <span class=\"status-icon\">✓</span>\n  <span class=\"status-text\">Success</span>\n</div>\n\n<!-- Bad: Information solely through color -->\n<div class=\"status success\">Success</div>\n\n<!-- CSS for good example -->\n.status {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.status-icon {\n  font-weight: bold;\n}",
          "description": "Examples of accessible vs non-accessible information transmission"
        }
      }
    },
    {
      "id": "motion-reduced",
      "label": "Respect reduced motion preferences",
      "description": "Media query prefers-reduced-motion",
      "details": {
        "explication": "Some users are sensitive to animations and movements. The 'prefers-reduced-motion' media query allows respecting their preferences and improving accessibility.",
        "commentFaire": [
          "Add @media (prefers-reduced-motion: reduce) to your CSS",
          "Test by enabling 'Reduce motion' in system settings",
          "Use 'axe DevTools' extension → Motion",
          "Check with 'Lighthouse' → Accessibility → Motion"
        ],
        "bonnesPratiques": [
          "Use prefers-reduced-motion: reduce",
          "Disable non-essential animations",
          "Replace animations with simple transitions",
          "Test with system settings",
          "Respect user preferences"
        ],
        "exemple": {
          "css": "/* Normal animation */\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n.element {\n  animation: fadeIn 0.5s ease-in;\n}\n\n/* Respect reduced motion preferences */\n@media (prefers-reduced-motion: reduce) {\n  .element {\n    animation: none;\n    opacity: 1;\n  }\n  \n  * {\n    animation-duration: 0.01ms !important;\n    animation-iteration-count: 1 !important;\n    transition-duration: 0.01ms !important;\n  }\n}",
          "description": "Example of CSS respecting reduced motion preferences"
        }
      }
    },
    {
      "id": "screen-reader-test",
      "label": "Test with a screen reader",
      "description": "Check experience with NVDA, JAWS, VoiceOver",
      "details": {
        "explication": "Testing your site with a screen reader is essential to understand the experience of blind or visually impaired users. It reveals accessibility issues that are otherwise invisible.",
        "commentFaire": [
          "Install NVDA (free) or use VoiceOver (Mac)",
          "Navigate your site using only keyboard",
          "Check that all elements are announced correctly",
          "Test navigation by headings and links"
        ],
        "bonnesPratiques": [
          "Test navigation by headings (H, Shift+H)",
          "Test navigation by links (L, Shift+L)",
          "Check announcements of images and buttons",
          "Test forms and keyboard navigation",
          "Check consistency of announcements"
        ],
        "exemple": {
          "html": "<!-- Structure testable with screen reader -->\n<nav aria-label=\"Main navigation\">\n  <ul>\n    <li><a href=\"/\" aria-current=\"page\">Home</a></li>\n    <li><a href=\"/services\">Services</a></li>\n  </ul>\n</nav>\n\n<main>\n  <h1>Home page</h1>\n  <p>Welcome to our site.</p>\n  \n  <form>\n    <label for=\"search\">Search:</label>\n    <input type=\"search\" id=\"search\" aria-describedby=\"search-help\">\n    <div id=\"search-help\">Type your search here</div>\n  </form>\n</main>",
          "description": "Example of HTML structure optimized for screen readers"
        }
      }
    }
  ]
}
